Menu="Utilities"
Icon="arduino-serial-controller.png"
Title="Arduino Serial Controller"
---
<?php
/* Arduino Serial Controller Web Interface */
$plugin = "arduino-serial-controller";
$settings_file = "/boot/config/plugins/$plugin/settings.cfg";
$log_file = "/var/log/arduino-serial-controller/arduino_controller.log";

// Load current settings function
function load_settings($file) {
    $settings = [
        'serial_port' => '/dev/ttyACM1',
        'baud_rate' => '9600',
        'update_interval' => '30',
        'timeout' => '5',
        'log_level' => 'INFO',
        'retry_attempts' => '3',
        'retry_delay' => '5'
    ];
    
    if (file_exists($file)) {
        $lines = file($file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
        if ($lines !== false) {
            foreach ($lines as $line) {
                if (strpos($line, '=') !== false && substr(trim($line), 0, 1) !== '#') {
                    $parts = explode('=', $line, 2);
                    if (count($parts) == 2) {
                        $settings[trim($parts[0])] = trim($parts[1]);
                    }
                }
            }
        }
    }
    
    return $settings;
}

$settings = load_settings($settings_file);
$status_output = shell_exec("/etc/rc.d/rc.arduino-serial-controller status 2>&1");
$service_running = strpos($status_output, 'is running') !== false;
$log_entries = [];
if (file_exists($log_file)) {
    $log_lines = file($log_file, FILE_IGNORE_NEW_LINES);
    if ($log_lines !== false) {
        $log_entries = array_slice($log_lines, -20);
    }
}

// All HTML output using PHP echo
echo '<style>
body { background: #1a1a1a; color: #e0e0e0; font-family: Arial, sans-serif; margin: 20px; }
.container { max-width: 1000px; margin: 0 auto; }
.panel { background: #2d2d2d; padding: 20px; margin: 20px 0; border-radius: 8px; border: 1px solid #444; }
.panel h2 { color: #ffffff; margin-top: 0; }
.status-running { background: #0d4f2c; border-color: #28a745; }
.status-stopped { background: #4f1a1a; border-color: #dc3545; }
.message { padding: 10px; border-radius: 5px; margin: 10px 0; }
.message.success { background: #0d4f2c; color: #90ee90; border: 1px solid #28a745; }
.message.error { background: #4f1a1a; color: #ff6b6b; border: 1px solid #dc3545; }
.message.info { background: #1a4f72; color: #87ceeb; border: 1px solid #5bc0de; }
.form-group { margin: 15px 0; }
.form-group label { display: block; margin-bottom: 5px; font-weight: bold; color: #ffffff; }
.form-group input, .form-group select { background: #3a3a3a; color: #e0e0e0; border: 1px solid #555; padding: 8px; border-radius: 4px; width: 200px; }
.form-group small { color: #aaa; font-size: 0.9em; }
.btn { padding: 10px 20px; margin: 5px; border: none; border-radius: 4px; cursor: pointer; font-weight: bold; }
.btn-primary { background: #0056b3; color: white; }
.btn-success { background: #218838; color: white; }
.btn-danger { background: #c82333; color: white; }
.btn-warning { background: #e0a800; color: black; }
.log-panel { background: #000; color: #00ff00; padding: 15px; border-radius: 5px; font-family: "Courier New", monospace; height: 300px; overflow-y: scroll; border: 1px solid #333; }
.loading { opacity: 0.6; pointer-events: none; }
.btn:disabled { opacity: 0.5; cursor: not-allowed; }
</style>';

echo '<div class="container">';
echo '<h1>Arduino Serial Controller</h1>';
echo '<div id="message-area"></div>';

echo '<div class="panel">';
echo '<h2>Arduino Connection Status</h2>';
if (file_exists('/dev/ttyACM1')) {
    echo '<p style="color: #90ee90;">✅ Arduino port /dev/ttyACM1 exists</p>';
} else {
    echo '<p style="color: #ff6b6b;">❌ Arduino port /dev/ttyACM1 not found</p>';
}
echo '</div>';

echo '<div class="panel ' . ($service_running ? 'status-running' : 'status-stopped') . '" id="service-panel">';
echo '<h2>Service Status</h2>';
echo '<p><strong>Status:</strong> <span id="service-status">' . ($service_running ? '<span style="color: #90ee90;">Running</span>' : '<span style="color: #ff6b6b;">Stopped</span>') . '</span></p>';
echo '<p><strong>Details:</strong> <span id="service-details">' . htmlspecialchars($status_output) . '</span></p>';
echo '<div style="margin-top: 15px;">';
echo '<button onclick="serviceAction(\'start\')" class="btn btn-success">Start Service</button>';
echo '<button onclick="serviceAction(\'stop\')" class="btn btn-danger">Stop Service</button>';
echo '<button onclick="serviceAction(\'restart\')" class="btn btn-warning">Restart Service</button>';
echo '<button onclick="serviceAction(\'status\')" class="btn btn-primary">Refresh Status</button>';
echo '<button onclick="testAjax()" class="btn btn-primary">Test AJAX</button>';
echo '<button onclick="debugSave()" class="btn btn-primary">Debug Save</button>';
echo '</div>';
echo '</div>';

echo '<div class="panel">';
echo '<h2>Configuration</h2>';
echo '<form id="config-form">';

echo '<div class="form-group">';
echo '<label for="serial_port">Serial Port:</label>';
echo '<input type="text" name="serial_port" value="' . htmlspecialchars($settings['serial_port']) . '" placeholder="/dev/ttyACM1">';
echo '<br><small>Arduino serial port (e.g., /dev/ttyUSB0, /dev/ttyACM1)</small>';
echo '</div>';

echo '<div class="form-group">';
echo '<label for="baud_rate">Baud Rate:</label>';
echo '<select name="baud_rate">';
foreach (['9600', '19200', '38400', '57600', '115200'] as $rate) {
    $selected = ($settings['baud_rate'] == $rate) ? 'selected' : '';
    echo '<option value="' . $rate . '" ' . $selected . '>' . $rate . '</option>';
}
echo '</select>';
echo '</div>';

echo '<div class="form-group">';
echo '<label for="update_interval">Update Interval (sec):</label>';
echo '<input type="number" name="update_interval" value="' . htmlspecialchars($settings['update_interval']) . '" min="5" max="300">';
echo '<br><small>How often to send status updates to Arduino</small>';
echo '</div>';

echo '<div class="form-group">';
echo '<label for="timeout">Timeout (sec):</label>';
echo '<input type="number" name="timeout" value="' . htmlspecialchars($settings['timeout']) . '" min="1" max="30">';
echo '<br><small>Serial communication timeout</small>';
echo '</div>';

echo '<div class="form-group">';
echo '<label for="log_level">Log Level:</label>';
echo '<select name="log_level">';
foreach (['DEBUG', 'INFO', 'WARNING', 'ERROR'] as $level) {
    $selected = ($settings['log_level'] == $level) ? 'selected' : '';
    echo '<option value="' . $level . '" ' . $selected . '>' . $level . '</option>';
}
echo '</select>';
echo '</div>';

echo '<div class="form-group">';
echo '<label for="retry_attempts">Retry Attempts:</label>';
echo '<input type="number" name="retry_attempts" value="' . htmlspecialchars($settings['retry_attempts']) . '" min="1" max="10">';
echo '<br><small>Connection retry attempts</small>';
echo '</div>';

echo '<div class="form-group">';
echo '<label for="retry_delay">Retry Delay (sec):</label>';
echo '<input type="number" name="retry_delay" value="' . htmlspecialchars($settings['retry_delay']) . '" min="1" max="30">';
echo '<br><small>Delay between retry attempts</small>';
echo '</div>';

echo '<button type="submit" class="btn btn-primary" id="save-btn">Save Configuration</button>';
echo '</form>';
echo '</div>';

echo '<div class="panel">';
echo '<h2>Recent Log Entries</h2>';
echo '<div class="log-panel" id="log-panel">';
foreach ($log_entries as $entry) {
    echo htmlspecialchars($entry) . '<br>';
}
echo '</div>';
echo '<button onclick="refreshLogs()" class="btn btn-primary" style="margin-top: 10px;">Refresh Logs</button>';
echo '</div>';

echo '<div class="panel">';
echo '<h2>Arduino Message Format</h2>';
echo '<p>The plugin sends JSON messages to the Arduino with the following format:</p>';
echo '<pre style="background: #000; color: #00ff00; padding: 10px; border-radius: 4px;">{
  "type": "message_type",
  "timestamp": "ISO_timestamp",
  "data": {
    // Message-specific data
  }
}</pre>';

echo '<h4>Message Types:</h4>';
echo '<ul>';
echo '<li><strong style="color: #90ee90;">system_startup</strong> - Sent when plugin starts</li>';
echo '<li><strong style="color: #90ee90;">status_update</strong> - Periodic status (CPU temp, time, etc.)</li>';
echo '<li><strong style="color: #90ee90;">system_shutdown</strong> - Sent when system is shutting down</li>';
echo '<li><strong style="color: #90ee90;">array_status_change</strong> - Sent when array starts/stops</li>';
echo '</ul>';
echo '</div>';

echo '</div>';

// JavaScript for AJAX functionality
echo '<script>
function showMessage(text, type, duration = 5000) {
    const messageArea = document.getElementById("message-area");
    messageArea.innerHTML = "<div class=\"message " + type + "\">" + text + "</div>";
    if (duration > 0) {
        setTimeout(() => {
            messageArea.innerHTML = "";
        }, duration);
    }
}

function testAjax() {
    showMessage("Testing AJAX connection...", "info");
    fetch("/plugins/arduino-serial-controller/ajax.php?action=test")
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showMessage("✅ AJAX Test: " + data.message, "success");
                console.log("AJAX test details:", data);
            } else {
                showMessage("❌ AJAX Test Failed: " + data.message, "error");
            }
        })
        .catch(error => {
            showMessage("❌ AJAX Test Error: " + error, "error");
        });
}

function debugSave() {
    showMessage("Testing file write permissions...", "info");
    fetch("/plugins/arduino-serial-controller/ajax.php?action=debug_save")
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showMessage("✅ Debug Save: " + data.message, "success");
            } else {
                showMessage("❌ Debug Save Failed: " + data.message, "error");
            }
            console.log("Debug save details:", data);
        })
        .catch(error => {
            showMessage("❌ Debug Save Error: " + error, "error");
        });
}

function serviceAction(action) {
    const panel = document.getElementById("service-panel");
    const buttons = panel.querySelectorAll("button");
    
    buttons.forEach(btn => btn.disabled = true);
    panel.classList.add("loading");
    
    showMessage("Executing service " + action + "...", "info", 0);
    
    fetch("/plugins/arduino-serial-controller/ajax.php?action=service&cmd=" + action)
        .then(response => response.json())
        .then(data => {
            buttons.forEach(btn => btn.disabled = false);
            panel.classList.remove("loading");
            
            if (data.success) {
                showMessage("✅ Service " + action + " completed", "success");
                if (action === "status") {
                    updateServiceStatus(data.message);
                } else {
                    setTimeout(() => serviceAction("status"), 1000);
                }
            } else {
                showMessage("❌ Service Error: " + data.message, "error");
            }
        })
        .catch(error => {
            buttons.forEach(btn => btn.disabled = false);
            panel.classList.remove("loading");
            showMessage("❌ Network Error: " + error, "error");
        });
}

function updateServiceStatus(statusText) {
    const isRunning = statusText.includes("is running");
    document.getElementById("service-status").innerHTML = isRunning ? 
        "<span style=\"color: #90ee90;\">Running</span>" : 
        "<span style=\"color: #ff6b6b;\">Stopped</span>";
    document.getElementById("service-details").textContent = statusText;
    
    const panel = document.getElementById("service-panel");
    panel.className = "panel " + (isRunning ? "status-running" : "status-stopped");
}

function refreshLogs() {
    fetch("/plugins/arduino-serial-controller/ajax.php?action=logs")
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const logPanel = document.getElementById("log-panel");
                logPanel.innerHTML = data.logs.map(line => line + "<br>").join("");
                logPanel.scrollTop = logPanel.scrollHeight;
                showMessage("✅ Logs refreshed", "success");
            }
        })
        .catch(error => {
            showMessage("❌ Error refreshing logs: " + error, "error");
        });
}

document.getElementById("config-form").addEventListener("submit", function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const saveBtn = document.getElementById("save-btn");
    const originalText = saveBtn.textContent;
    
    this.classList.add("loading");
    saveBtn.disabled = true;
    saveBtn.textContent = "Saving...";
    showMessage("� Saving configuration...", "info", 0);
    
    fetch("/plugins/arduino-serial-controller/ajax.php?action=save", {
        method: "POST",
        body: formData
    })
        .then(response => response.json())
        .then(data => {
            this.classList.remove("loading");
            saveBtn.disabled = false;
            saveBtn.textContent = originalText;
            
            if (data.success) {
                showMessage("��✅ " + data.message, "success");
                console.log("Save result:", data);
            } else {
                showMessage("❌ Save Error: " + data.message, "error");
                console.log("Save error details:", data);
            }
        })
        .catch(error => {
            this.classList.remove("loading");
            saveBtn.disabled = false;
            saveBtn.textContent = originalText;
            showMessage("❌ Save Network Error: " + error, "error");
        });
});

setTimeout(() => serviceAction("status"), 1000);
</script>';
?>
