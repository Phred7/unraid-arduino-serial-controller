#!/bin/bash
#
# Arduino Serial Controller service script for Unraid
#

DAEMON="arduino_serial_controller"
PIDFILE="/var/run/${DAEMON}.pid"
LOGFILE="/var/log/arduino-serial-controller/${DAEMON}.log"
DAEMON_PATH="/usr/local/bin/arduino-serial-controller"

# Create log directory if it doesn't exist
mkdir -p /var/log/arduino-serial-controller

arduino_serial_controller_start() {
    # Check if already running
    if [ -f $PIDFILE ]; then
        PID=$(cat $PIDFILE)
        if kill -0 $PID 2>/dev/null; then
            echo "Arduino Serial Controller is already running (PID: $PID)"
            return 0
        else
            echo "Removing stale PID file"
            rm -f $PIDFILE
        fi
    fi
    
    echo "Starting Arduino Serial Controller..."
    
    # Start the daemon in background
    nohup $DAEMON_PATH >> $LOGFILE 2>&1 &
    
    # Save PID
    echo $! > $PIDFILE
    
    # Wait a moment and check if it started successfully
    sleep 2
    if kill -0 $(cat $PIDFILE) 2>/dev/null; then
        echo "Arduino Serial Controller started successfully (PID: $(cat $PIDFILE))"
        return 0
    else
        echo "Failed to start Arduino Serial Controller"
        rm -f $PIDFILE
        return 1
    fi
}

arduino_serial_controller_stop() {
    if [ ! -f $PIDFILE ]; then
        echo "Arduino Serial Controller is not running"
        return 0
    fi
    
    PID=$(cat $PIDFILE)
    
    if ! kill -0 $PID 2>/dev/null; then
        echo "Arduino Serial Controller is not running (removing stale PID file)"
        rm -f $PIDFILE
        return 0
    fi
    
    echo "Stopping Arduino Serial Controller..."
    
    # Send SIGTERM for graceful shutdown
    kill -TERM $PID
    
    # Wait for process to stop
    TIMEOUT=30
    while [ $TIMEOUT -gt 0 ] && kill -0 $PID 2>/dev/null; do
        sleep 1
        TIMEOUT=$((TIMEOUT - 1))
    done
    
    if kill -0 $PID 2>/dev/null; then
        echo "Process didn't stop gracefully, forcing shutdown..."
        kill -KILL $PID
        sleep 2
    fi
    
    rm -f $PIDFILE
    echo "Arduino Serial Controller stopped"
    return 0
}

arduino_serial_controller_restart() {
    arduino_serial_controller_stop
    sleep 2
    arduino_serial_controller_start
}

arduino_serial_controller_status() {
    if [ -f $PIDFILE ]; then
        PID=$(cat $PIDFILE)
        if kill -0 $PID 2>/dev/null; then
            echo "Arduino Serial Controller is running (PID: $PID)"
            return 0
        else
            echo "Arduino Serial Controller is not running (stale PID file exists)"
            return 1
        fi
    else
        echo "Arduino Serial Controller is not running"
        return 1
    fi
}

case "$1" in
    'start')
        arduino_serial_controller_start
        ;;
    'stop')
        arduino_serial_controller_stop
        ;;
    'restart')
        arduino_serial_controller_restart
        ;;
    'status')
        arduino_serial_controller_status
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        exit 1
        ;;
esac

exit $?