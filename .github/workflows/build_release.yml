name: Build and Release Arduino Serial Controller

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin/env" >> $GITHUB_PATH
        
    - name: Prepare build environment
      run: |
        mkdir -p src/arduino_serial_controller
        cp arduino_serial_controller.py src/arduino_serial_controller/__init__.py
        
        # Create __main__.py for executable entry point
        cat > src/arduino_serial_controller/__main__.py << 'EOF'
        #!/usr/bin/env python3
        from . import main
        if __name__ == '__main__':
            main()
        EOF
        
    - name: Build executable
      run: |
        # Create build script for Docker
        cat > build_in_docker.sh << 'EOF'
        #!/bin/bash
        set -e
        cd /workspace
        
        # Install Python and pip
        apt update
        apt install -y python3 python3-pip curl
        
        # Install UV
        curl -LsSf https://astral.sh/uv/install.sh | sh
        source $HOME/.cargo/env
        
        # Install dependencies
        uv venv
        source .venv/bin/activate
        uv pip install pyserial pyinstaller
        
        # Build executable
        pyinstaller \
          --onefile \
          --name arduino-serial-controller \
          --console \
          --clean \
          --strip \
          --optimize 2 \
          --distpath ./dist \
          arduino_serial_controller.py
          
        # Make executable
        chmod +x dist/arduino-serial-controller
        EOF
        
        chmod +x build_in_docker.sh
        
        # Build in Ubuntu 18.04 container for better GLIBC compatibility
        docker run --rm -v $(pwd):/workspace ubuntu:18.04 /workspace/build_in_docker.sh
          
    - name: Test executable
      run: |
        # Check what we built
        echo "🔍 Checking built executable:"
        ls -la dist/arduino-serial-controller
        file dist/arduino-serial-controller
        
        echo "🔍 Checking GLIBC requirements:"
        readelf -V dist/arduino-serial-controller | grep GLIBC || echo "No GLIBC version info found"
        objdump -T dist/arduino-serial-controller | grep GLIBC | sort -u || echo "No objdump GLIBC info"
        
        echo "🧪 Testing executable..."
        timeout 5 ./dist/arduino-serial-controller || echo "⚠️  Executable exited (expected without Arduino hardware)"
        
    - name: Create plugin package
      run: |
        # Extract version from GITHUB_REF_NAME (which contains the tag name)
        if [[ "$GITHUB_REF_NAME" == v* ]]; then
          VERSION="${GITHUB_REF_NAME#v}"  # Remove 'v' prefix
        else
          VERSION="$GITHUB_REF_NAME"
        fi
        
        echo "Tag name: $GITHUB_REF_NAME"
        echo "Using version: $VERSION"
        
        # Create a minimal txz package (even if empty, the plugin expects it)
        mkdir -p package/usr/local/emhttp/plugins/arduino-serial-controller
        echo "# Arduino Serial Controller Plugin Package" > package/usr/local/emhttp/plugins/arduino-serial-controller/README
        cd package
        tar -cJf ../arduino-serial-controller-$VERSION.txz .
        cd ..
        
        # Store the filename for later use
        echo "PACKAGE_FILE=arduino-serial-controller-$VERSION.txz" >> $GITHUB_ENV
        
    - name: Get tag name
      id: tag
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          TAG=${GITHUB_REF#refs/tags/}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=${TAG#v}" >> $GITHUB_OUTPUT
        else
          TAG="v$(date +%Y.%m.%d)"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$(date +%Y.%m.%d)" >> $GITHUB_OUTPUT
        fi
        echo "Detected tag: $TAG"
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Arduino Serial Controller ${{ github.ref_name }}
        body: |
          ## Arduino Serial Controller Release ${{ steps.tag.outputs.tag }}
          
          ### What's New
          - Standalone executable for Unraid
          - No Python installation required
          - Automatic Arduino communication
          - System status monitoring
          - Array state notifications
          - Shutdown handling
          
          ### Installation
          1. Download the `.plg` file
          2. Install through Unraid's Plugin Manager
          3. Configure your Arduino serial port in Settings
          
          ### Files
          - `arduino-serial-controller.plg` - Unraid plugin file
          - `arduino-serial-controller` - Standalone executable
          - `arduino-serial-controller-*.txz` - Plugin package
          
        draft: false
        prerelease: false
        
    - name: Upload Plugin File
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./arduino-serial-controller.plg
        asset_name: arduino-serial-controller.plg
        asset_content_type: application/xml
        
    - name: Upload Executable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/arduino-serial-controller
        asset_name: arduino-serial-controller
        asset_content_type: application/octet-stream
        
    - name: Upload Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.PACKAGE_FILE }}
        asset_name: ${{ env.PACKAGE_FILE }}
        asset_content_type: application/x-xz